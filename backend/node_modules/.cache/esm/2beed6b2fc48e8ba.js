let Joi,CustomErrorHandler,User;_fc4‍.x([["default",()=>_fc4‍.o]]);_fc4‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_fc4‍.w("../../service/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_fc4‍.w("../../models",[["User",["User"],function(v){User=v}]]);


const registerController = {
  async register(req, res, next) {
    // CheckList
    /*
                        Validate the request
                        authorize the request
                        check if user is in the database already
                        prepare model 
                        store in database 
                        generate jwt token 
                        send response
                */

    // validation
    const registerSchema = Joi.object({
      name: Joi.string().min(3).max(30).required(),
      email: Joi.string().min(5).max(30).required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
      repeat_password: Joi.ref("password"),
    });

    const { error } = registerSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    //     // check if user is in the database already
    try {
      const exist = await User.exists({ email: req.body.email });
      if (exist) {
        return next(
          CustomErrorHandler.alreadyExist("This email is already taken.")
        );
      }
    } catch (err) {
      return next(err);
    }
    //     const { name, email, password } = req.body;
    res.json({ message: "hello world" });
  },
};

_fc4‍.d(registerController);
